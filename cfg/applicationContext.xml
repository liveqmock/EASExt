<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-2.5.xsd
	   http://cxf.apache.org/jaxws 
	   http://cxf.apache.org/schemas/jaxws.xsd
       http://cxf.apache.org/core 
       http://cxf.apache.org/schemas/core.xsd 
       http://cxf.apache.org/transports/http/configuration
       http://cxf.apache.org/schemas/configuration/http-conf.xsd"
       default-init-method="init">
			<!-- 定义使用C3P0连接池的数据源 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 指定连接数据库的JDBC驱动 -->
		<property name="driverClass">
			<value>${jdbc.driverClassName}</value>
		</property>
		<!-- 连接数据库所用的URL -->
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<!-- 连接数据库的用户名 -->
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<!-- 连接数据库的密码 -->
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<!-- 设置数据库连接池的最大连接数 -->
		<property name="maxPoolSize">
			<value>100</value>
		</property>
		<!-- 设置数据库连接池的最小连接数 -->
		<property name="minPoolSize">
			<value>2</value>
		</property>
		<!-- 设置数据库连接池的初始化连接数 -->
		<property name="initialPoolSize">
			<value>20</value>
		</property>
		<!-- 设置数据库连接池的连接的最大空闲时间,单位为秒 -->
		<property name="maxIdleTime">
			<value>100</value>
		</property>
	</bean>
	<!-- 配置aop 支持 @AspectJ 标记-->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<bean class="com.creditease.eas.filter.LogAdvice"></bean>
	
     <!--<aop:aspectj-autoproxy />  支持aop注解方式easext.properties ,eas02.properties-->
    <context:property-placeholder location="classpath:easext.properties"/>
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations">
			<value>classpath:com/**/mapping/*.xml</value><!-- sunxiaofeng<value>classpath:com/creditease/eas/**/mapping/*.xml</value>-->
		</property>
<!--		<property name="typeAliases">-->
<!--		</property>-->
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
      <property name="dataSource" ref="dataSource" /> 
    </bean>
    <!-- 支持事务注解：@Transactional -->
    <tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 配置aop -->
	<aop:config>
		<aop:pointcut expression="execution(public * com.creditease.eas.*.service.impl.*.*(..))" id="bussinessService" />
		<!-- 通知别的程序，对我切到的方法进行处理， -->
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="bussinessService" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED" />
			<!-- get开头的方法不需要在事务中运行 。有些情况是没有必要使用事务的，比如获取数据。开启事务本身对性能是有一定的影响的-->
	  		 <tx:method name="*" propagation="REQUIRED" /><!--其他方法在实务中运行 -->
		</tx:attributes>
	</tx:advice>
	<!-- 扫描包，并自动注入 --><!--sunxiaofeng
    <context:component-scan base-package="com.creditease.eas"/>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.creditease.eas.*.dao"/>
    </bean>
     --><context:component-scan base-package="com.creditease.eas,com.change.eas"/>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.creditease.eas.*.dao,com.change.eas.*.dao"/>
    </bean>
    <!-- smp接口 -->
    	<bean id="client3" class="com.creditease.smp.manager.EASWebservice" factory-bean="clientFactory3" factory-method="create" />
	<bean id="clientFactory3" class="org.apache.cxf.jaxws.JaxWsProxyFactoryBean">
		<property name="serviceClass" value="com.creditease.smp.manager.EASWebservice" />
		<property name="address" value="http://smp.creditease.cn/services/easWebService" />
		 <property name="outInterceptors">  
			<list>  
				<bean class="org.apache.cxf.interceptor.LoggingOutInterceptor" />    
				<bean class="org.apache.cxf.binding.soap.saaj.SAAJOutInterceptor" />    
				<bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">    
					<constructor-arg>    
						<map>    
							<entry key="action" value="UsernameToken" />
							<entry key="passwordType" value="PasswordText" />
							<entry key="user" value="cxfClient" />
							<entry key="passwordCallbackRef">
							<ref bean="clientPasswordCallback" />
							</entry>
						</map>
					</constructor-arg>
				</bean>
			</list>  
</property>  
	</bean > 
	<!-- bean id="client4" class="com.creditease.core.ws.client.UserService" factory-bean="clientFactory4" factory-method="create" />
	<bean id="clientFactory4" class="org.apache.cxf.jaxws.JaxWsProxyFactoryBean">
		<property name="serviceClass" value="com.creditease.core.ws.client.UserService" />
		<property name="address" value="http://localhost:8080/smp/services/userAutService" />
	</bean -->
	 <bean id="clientPasswordCallback" class="com.creditease.eas.hrnew.service.ClientPasswordCallback"></bean>
		<http-conf:conduit name="*.http-conduit">
<!--			<http-conf:client  AllowChunking="false" ConnectionTimeout="120000" ReceiveTimeout="60000"/>-->
			<http-conf:client  AllowChunking="false" ConnectionTimeout="180000" ReceiveTimeout="360000"/>
		</http-conf:conduit>
</beans>